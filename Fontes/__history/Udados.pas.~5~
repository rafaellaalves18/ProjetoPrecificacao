unit Udados;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.FBDef,
  FireDAC.VCLUI.Wait, FireDAC.Comp.UI, FireDAC.Phys.IBBase, FireDAC.Phys.FB,
  Data.DB, FireDAC.Comp.Client, classes.conexao  ;

type
  TDmdados = class(TDataModule)
    FDConnection: TFDConnection;
    FBDriverLink: TFDPhysFBDriverLink;
    FDGUIxWaitCursor: TFDGUIxWaitCursor;
    procedure DataModuleCreate(Sender: TObject);
    procedure DataModuleDestroy(Sender: TObject);
  private

    { Private declarations }
  public
      Conexao : Tconexao; // criando o objeto para ter todos os metodos da classe conexao
      procedure prcGravaArqIni;
    { Public declarations }
  end;

var
  Dmdados: TDmdados;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}



{$R *.dfm}

procedure TDmdados.DataModuleCreate(Sender: TObject);
begin
   Conexao := TConexao.Create(FDConnection);
   // associa o componente a classe
end;

procedure TDmdados.DataModuleDestroy(Sender: TObject);
begin
   Conexao.Destroy;
end;

procedure TDmdados.prcGravaArqIni;
var
  IniFile : String;
  Ini     : TiniFile;
begin
   // funcao para buscar o caminho e o nome do exe e cria o .ini
   IniFile := ChangeFileExt(Application.Exename, '.ini' ) ;
   Ini     := TiniFile.Create( IniFile); // criado o arquivo ini

   Try
     // escreve a string dentro do arquivo
     // armazena no arquivo ini as propriedade da classe
     Ini.WriteString('Configuracao','Servidor',FServidor );
     Ini.WriteString('Configuracao','Base', FBase );
     Ini.WriteString('Configuracao','Porta', FPorta );
     Ini.WriteString('Acesso','Login', FLogin );
     Ini.WriteString('Acesso','Senha', FSenha );
   Finally
     Ini.Free; // libera da memoria
   End;
end;

end.
